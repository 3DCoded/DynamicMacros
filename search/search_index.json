{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Klipper Dynamic Macros","text":"<p>Never restart Klipper again for simple macros.</p> <p>Klipper Dynamic Macros is an unofficial way to update macros without restarting Klipper, so you can update macros mid-print and see their results live. It also supports extra features that normal GCode Macros don't have.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Recursion</li> <li>Receiving Variables</li> <li>Utility Functions</li> <li>Variables</li> </ul>"},{"location":"#how-normal-macros-work","title":"How Normal Macros Work","text":"<p>Your macros are written in a <code>.cfg</code> file, then included into your <code>printer.cfg</code>. When Klipper restarts, it parses these files and saves the macros internally (you can't change them without restarting Klipper). When a macro is called, the cached code is interpreted and run.</p>"},{"location":"#how-dynamic-macros-work","title":"How Dynamic Macros Work","text":"<p>Your macros are written in a <code>.cfg</code> file, then the relative path to that file is configured in a <code>[dynamicmacros]</code> config section. The config files are read and parsed every time you run the macro, allowing you to update macros without restarting Klipper.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>Follow the Tutorial to get started with Dynamic Macros.</p>"},{"location":"#planned-features","title":"Planned Features","text":"<p>See Development Status for the currently available features, and planned features.</p>"},{"location":"#examples","title":"Examples","text":"<p>See Example Macros for examples of Dynamic Macros.</p>"},{"location":"#more-projects","title":"More Projects","text":"<p>If you like this project, don't forget to give it a star! Also, check out the 3MS, a modular multimaterial system for Klipper!</p>"},{"location":"devstatus/","title":"Development Status","text":""},{"location":"devstatus/#features","title":"Features","text":"<ul> <li>Editing macros without restarting Klipper</li> <li>Accessing printer information from within Dynamic Macros</li> <li>Accessing parameters from within Dynamic Macros</li> <li>Adding new Dynamic Macros without restarting Klipper</li> <li>Removing existing Dynamic Macros without restarting Klipper</li> <li>Renaming Dynamic Macros without restarting Klipper</li> <li>Dynamic Macro descriptions</li> <li>Dynamic Macro variables</li> <li>Retrieving variables from other macros</li> <li>Support for <code>rename_existing</code></li> </ul>"},{"location":"examples/","title":"Example Macros","text":"<p>This page will hold several different Dynamic Macro examples. Note that most of the examples here are specific to Dynamic Macros only.</p>"},{"location":"examples/#m900","title":"M900","text":"<p>Normal Macro</p> <p>In Marlin, M900 K is used to set pressure/linear advance. Now, you can use it in Klipper too:</p> <pre><code>[gcode_macro M900]\ndescription: Set Pressure Advance\ngcode:\n  {% set k = params.K|default(0)|float %}\n  {% if k &lt; 1 %}\n    SET_PRESSURE_ADVANCE ADVANCE={k}\n  {% endif %}\n</code></pre>"},{"location":"examples/#recursion","title":"Recursion","text":"<p>Dynamic Macro</p> <p>This is an example Dynamic Macro to demonstrate the recursive functionality of Dynamic Macros.</p> <pre><code>[gcode_macro RECURSION_TEST]\ngcode:\n  {% set num = params.NUM|default(5)|int %}\n  {% if num == 0 %}\n  RESPOND MSG=\"End\"\n  {% else %}\n  RESPOND MSG={num}\n  RECURSION_TEST NUM={num-1}\n  {% endif %}\n</code></pre>"},{"location":"examples/#receiving-position-updates","title":"Receiving Position Updates","text":"<p>Dynamic Macro</p> <p>This is an example Dynamic Macro to demonstrate the ability to receive position updates from within the same macro.</p> <pre><code>[gcode_macro DYNAMIC_MOVE]\ngcode:\n  G28\n\n\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position after G28\n  G90\n  G1 Z20\n\n\n  M117 After: {printer.toolhead.position.z}\n  # Above displays position after G1\n</code></pre>"},{"location":"examples/#preserving-variables","title":"Preserving Variables","text":"<p>Dynamic Macro</p> <p>This is an example of how to preserve variables across triple-newlines in Dynamic Macros.</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = update(\"num\", 10) %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs 10\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Follow this guide to setup and confiure Dynamic Macros.</p>"},{"location":"tutorial/#install","title":"Install","text":"<p>Run in your terminal:</p> <pre><code>cd ~\ngit clone https://github.com/3DCoded/DynamicMacros\ncd DynamicMacros\nsh install.sh\nsudo service klipper restart\n</code></pre>"},{"location":"tutorial/#configuration","title":"Configuration","text":"<p>To configure Dynamic Macros, put in your <code>printer.cfg</code> (or a file included in it):</p> printer.cfg<pre><code>[dynamicmacros]\nmacros: dynamic.cfg\n</code></pre> <p>Create a new file in the same folder as your <code>printer.cfg</code> called <code>dynamic.cfg</code>. In it, configure some macros like you normally would. Example:</p> dynamic.cfg<pre><code>[gcode_macro MYTEST]\ngcode:\n    M117 Hello world!\n\n[gcode_macro HEAT_HOTEND]\ngcode:\n    {% set temp = params.TEMP|int %}\n    M104 S{temp}\n</code></pre> <p>Restart Klipper.</p> <p>Info</p> <p>Updating the <code>[dynamicmacros]</code> config section requires a Klipper restart. The files listed in the <code>macros:</code> parameter must be present when Klipper restarts.</p>"},{"location":"tutorial/#testing","title":"Testing","text":"<p>If you run the command <code>MYTEST</code>, the output should be: <pre><code>Hello world!\n</code></pre></p> <p>If you runthe command <code>HEAT_HOTEND TEMP=200</code>, the hotend should start heating up. </p> <p>Next, edit the <code>MYTEST</code> macro to output something else, like <code>Test successful!</code></p> dynamic.cfg<pre><code>[gcode_macro MYTEST]\ngcode:\n    M117 Test successful!\n</code></pre> <p>Save the file, but do not restart Klipper.</p> <p>Run <code>MYTEST</code> again, and the output should be: <pre><code>Test successful!\n</code></pre></p>"},{"location":"tutorial/#features","title":"Features","text":"<ul> <li>Recursion</li> <li>Receiving Variable Updates</li> </ul>"},{"location":"tutorial/#when-to-restart-klipper-or-reload-dynamic-macros","title":"When to Restart Klipper or Reload Dynamic Macros","text":"<p>Dynamic Macros provides a utility <code>DYNAMIC_MACRO</code> command to run macros manually, and to refresh the macros. Usage examples (assuming M900 is defined as a Dynamic Macro):</p> <pre><code>DYNAMIC_MACRO MACRO=M900 K=0.035\n</code></pre> <p>is the same as:</p> <pre><code>M900 K0.035\n</code></pre> <p>To refresh Dynamic Macros, just run <code>DYNAMIC_MACRO</code> with no parameters.</p> <p>A Klipper restart is required if:</p> <ul> <li>You changed the description</li> </ul> <p>A <code>DYNAMIC_MACRO</code> refresh is required if:</p> <ul> <li>You created a new macro</li> <li>You renamed an existing macro</li> <li>You changed the contents of a macro</li> <li>You deleted an existing macro</li> </ul>"},{"location":"features/receivingvariables/","title":"Receiving Variable Updates","text":"<p>Unlike normal <code>gcode_macro</code>s, Dynamic Macros supports receiving variable updates within the same macro. For example, the following macro will show the same output in both <code>M117</code>s:</p> <pre><code>[gcode_macro STATIC_MOVE]\ngcode:\n  G28\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position before macro run\n  G90\n  G1 Z20\n  M117 After: {printer.toolhead.position.z}\n  # Above displays same position\n</code></pre> <p>However, this macro will show different outputs based on the current Z position of the toolhead:</p> <pre><code>[gcode_macro DYNAMIC_MOVE]\ngcode:\n  G28\n\n\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position after G28\n  G90\n  G1 Z20\n\n\n  M117 After: {printer.toolhead.position.z}\n  # Above displays position after G1\n</code></pre> <p>Notice the large whitespaces. Three newline characters (two blank lines) between code segments denotes a variable update. However, some variables won't be preserevd across the whitespace.</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = 10 %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs nothing\n</code></pre> <p>You can use the <code>update()</code> function to preserve certain variables across the whitespaces:</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = update(\"num\", 10) %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs 10\n</code></pre> <p>See Examples for examples.</p>"},{"location":"features/recursion/","title":"Recursion","text":"<p>Unlike normal <code>gcode_macro</code>s, Dynamic Macros supports recursion (allowing a macro to call itself). For more examples, see Examples</p>"},{"location":"features/utilities/","title":"Utility Functions","text":"<p>Dynamic Macros provides a few utility functions to make Dynamic Macros easier to write.</p>"},{"location":"features/utilities/#update","title":"update()","text":"<p>The <code>update()</code> function allows to save variables across whitespaces (see Receiving Variables for more information). Example:</p> <pre><code>[gcode_macro MY_MACRO]\ngcode:\n    {% set a = 10 %}\n    {% set b = update(\"b\", 20) %}\n    RESPOND MSG=\"A: {a}\" # 10\n    RESPOND MSG=\"B: {b}\" # 20\n\n\n    RESPOND MSG=\"A: {a}\" # \"\"\n    RESPOND MSG=\"B: {b}\" # 20\n</code></pre>"},{"location":"features/utilities/#get_macro_variables","title":"get_macro_variables()","text":"<p>The <code>get_macro_variables()</code> function allows to retrieve all the variables from another macro in one line of code. Example:</p> <pre><code>[gcode_macro MY_SETTINGS]\nvariable_a: 10\nvariable_b: 20\ngcode:\n    RESPOND MSG=\"settings\"\n\n[gcode_macro GET_SETTINGS]\ngcode:\n    {% set settings = get_macro_variables(\"MY_SETTINGS\") %}\n    RESPOND MSG=\"Settings: {settings}\"\n    RESPOND MSG=\"A: {settings.a}\"\n</code></pre>"},{"location":"features/utilities/#update_from_dict","title":"update_from_dict()","text":"<p>The <code>update_from_dict()</code> function allows for saving the output of <code>get_macro_variables()</code> (or other dictionaries) across the whitespaces when Receiving Variables. Example:</p> <pre><code>[gcode_macro MY_SETTINGS]\nvariable_a: 10\nvariable_b: 20\ngcode:\n    RESPOND MSG=\"settings\"\n\n[gcode_macro GET_SETTINGS]\ngcode:\n    {% set settings = get_macro_variables(\"MY_SETTINGS\") %}\n    {% set settings = update_from_dict(settings) %}\n\n\n    RESPOND MSG=\"A: {a}\" # 10\n    RESPOND MSG=\"B: {b}\" # 20\n</code></pre>"},{"location":"features/variables/","title":"Variables","text":"<p>Dynamic Macro variables work nearly the same way as standard <code>gcode_macro</code> variables. This guide covers the differences.</p>"},{"location":"features/variables/#set_dynamic_variable","title":"SET_DYNAMIC_VARIABLE","text":"<p>Instead of using <code>SET_GCODE_VARIABLE</code>, Dynamic Macros use <code>SET_DYNAMIC_VARIABLE</code> to update Dynamic Macro variables. Example (assuming <code>VAR_TEST</code> is defined from Utilities):</p> <pre><code>SET_DYNAMIC_VARIABLE MACRO=var_test VARIABLE=a VALUE=15\n</code></pre>"}]}