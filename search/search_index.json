{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Klipper Dynamic Macros","text":"<p>Never restart Klipper again for simple macros.</p> <p>Klipper Dynamic Macros is an unofficial way to update macros without restarting Klipper, so you can update macros mid-print and see their results live. It also supports extra features that normal GCode Macros don't have.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Recursion</li> <li>Receiving Variables</li> <li>Utility Functions</li> <li>Variables</li> </ul>"},{"location":"#how-normal-macros-work","title":"How Normal Macros Work","text":"<p>Your macros are written in a <code>.cfg</code> file, then included into your <code>printer.cfg</code>. When Klipper restarts, it parses these files and saves the macros internally (you can't change them without restarting Klipper). When a macro is called, the cached code is interpreted and run.</p>"},{"location":"#how-dynamic-macros-work","title":"How Dynamic Macros Work","text":"<p>Your macros are written in a <code>.cfg</code> file, then the relative path to that file is configured in a <code>[dynamicmacros]</code> config section. The config files are read and parsed every time you run the macro, allowing you to update macros without restarting Klipper.</p>"},{"location":"#get-started","title":"Get Started","text":"<p>Follow Setup to get started with Dynamic Macros.</p>"},{"location":"#planned-features","title":"Planned Features","text":"<p>See Development Status for the currently available features, and planned features.</p>"},{"location":"#examples","title":"Examples","text":"<p>See Example Macros for examples of Dynamic Macros.</p>"},{"location":"#more-projects","title":"More Projects","text":"<p>If you like this project, don't forget to give it a star! Also, check out the 3MS, a modular multimaterial system for Klipper!</p>"},{"location":"devstatus/","title":"Development Status","text":""},{"location":"devstatus/#features","title":"Features","text":"<ul> <li>Editing macros without restarting Klipper</li> <li>Accessing printer information from within Dynamic Macros</li> <li>Accessing parameters from within Dynamic Macros</li> <li>Adding new Dynamic Macros without restarting Klipper</li> <li>Removing existing Dynamic Macros without restarting Klipper</li> <li>Renaming Dynamic Macros without restarting Klipper</li> <li>Dynamic Macro descriptions</li> <li>Dynamic Macro variables</li> <li>Retrieving variables from other macros</li> <li>Support for <code>rename_existing</code></li> </ul>"},{"location":"devstatus/#planned-features","title":"Planned Features","text":"<ul> <li> EXPERIMENTAL: Running Python internally inside macros</li> <li> Allow configuring multiple <code>dynamicmacros</code> config sections</li> </ul>"},{"location":"examples/","title":"Example Macros","text":"<p>This page will hold several different Dynamic Macro examples. Note that most of the examples here are specific to Dynamic Macros only.</p>"},{"location":"examples/#m900","title":"M900","text":"<p>Normal Macro</p> <p>In Marlin, M900 K is used to set pressure/linear advance. Now, you can use it in Klipper too:</p> <pre><code>[gcode_macro M900]\ndescription: Set Pressure Advance\ngcode:\n  {% set k = params.K|default(0)|float %}\n  {% if k &lt; 1 %}\n    SET_PRESSURE_ADVANCE ADVANCE={k}\n  {% endif %}\n</code></pre>"},{"location":"examples/#recursion","title":"Recursion","text":"<p>Dynamic Macro</p> <p>These are a few example Dynamic Macros to demonstrate the recursive functionality of Dynamic Macros.</p> Counting to 10<pre><code>[gcode_macro COUNT]\ngcode:\n    {% set num = params.NUM|default(1)|int %}\n    {% if num &lt;= 10 %}\n        RESPOND MSG={num}\n        COUNT NUM={num+1} # Count up 1\n    {% else %}\n        RESPOND MSG=\"Done Counting\"\n    {% endif %}\n</code></pre> Load to Filament Sensor<pre><code>[gcode_macro LOAD_TO_FSENSOR]\ngcode:\n    {% set val = printer[\"filament_sensor fsensor\"].filament_detected %}\n    {% if val == 0 %}\n        M83\n        G1 E50 F900 # Move filament 50mm forwards\n        RESPOND MSG=\"Waiting for fsensor\"\n        LOAD_TO_FSENSOR # Recursion\n    {% else %}\n        G1 E65 F900 # Move filament to nozzle\n        RESPOND MSG=\"Filament Loaded\"\n    {% endif %}\n</code></pre>"},{"location":"examples/#receiving-position-updates","title":"Receiving Position Updates","text":"<p>Dynamic Macro</p> <p>This is an example Dynamic Macro to demonstrate the ability to receive position updates from within the same macro.</p> <pre><code>[gcode_macro DYNAMIC_MOVE]\ngcode:\n  G28\n\n\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position after G28\n  G90\n  G1 Z20\n\n\n  M117 After: {printer.toolhead.position.z}\n  # Above displays position after G1\n</code></pre>"},{"location":"examples/#preserving-variables","title":"Preserving Variables","text":"<p>Dynamic Macro</p> <p>This is an example of how to preserve variables across triple-newlines in Dynamic Macros.</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = update(\"num\", 10) %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs 10\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<p>Follow this guide to setup and confiure Dynamic Macros.</p>"},{"location":"setup/#install","title":"Install","text":"<p>Run in your terminal:</p> <pre><code>cd ~\ngit clone https://github.com/3DCoded/DynamicMacros\ncd DynamicMacros\nsh install.sh\nsudo service klipper restart\n</code></pre>"},{"location":"setup/#configuration","title":"Configuration","text":"<p>To configure Dynamic Macros, put in your <code>printer.cfg</code> (or a file included in it):</p> printer.cfg<pre><code>[dynamicmacros]\nconfigs: dynamic.cfg\n</code></pre> <p>Create a new file in the same folder as your <code>printer.cfg</code> called <code>dynamic.cfg</code>. In it, configure some macros like you normally would. Example:</p> dynamic.cfg<pre><code>[gcode_macro MYTEST]\ngcode:\n    M117 Hello world!\n\n[gcode_macro HEAT_HOTEND]\ngcode:\n    {% set temp = params.TEMP|int %}\n    M104 S{temp}\n</code></pre> <p>Restart Klipper.</p> <p>Info</p> <p>Updating the <code>[dynamicmacros]</code> config section requires a Klipper restart. The files listed in the <code>macros:</code> parameter must be present when Klipper restarts.</p>"},{"location":"setup/#testing","title":"Testing","text":"<p>If you run the command <code>MYTEST</code>, the output should be: <pre><code>Hello world!\n</code></pre></p> <p>If you runthe command <code>HEAT_HOTEND TEMP=200</code>, the hotend should start heating up. </p> <p>Next, edit the <code>MYTEST</code> macro to output something else, like <code>Test successful!</code></p> dynamic.cfg<pre><code>[gcode_macro MYTEST]\ngcode:\n    M117 Test successful!\n</code></pre> <p>Save the file, but do not restart Klipper.</p> <p>Run <code>MYTEST</code> again, and the output should be: <pre><code>Test successful!\n</code></pre></p>"},{"location":"setup/#features","title":"Features","text":"<ul> <li>Recursion</li> <li>Receiving Variable Updates</li> <li>Utility Functions</li> <li>Variables</li> </ul>"},{"location":"setup/#tutorial","title":"Tutorial","text":"<p>Follow the Tutorial.</p>"},{"location":"setup/#when-to-restart-klipper-or-reload-dynamic-macros","title":"When to Restart Klipper or Reload Dynamic Macros","text":"<p>Dynamic Macros provides a utility <code>DYNAMIC_MACRO</code> command to run macros manually, and to refresh the macros. Usage examples (assuming M900 is defined as a Dynamic Macro):</p> <pre><code>DYNAMIC_MACRO MACRO=M900 K=0.035\n</code></pre> <p>is the same as:</p> <pre><code>M900 K0.035\n</code></pre> <p>To refresh Dynamic Macros, just run <code>DYNAMIC_MACRO</code> with no parameters.</p> <p>A Klipper restart is required if:</p> <ul> <li>You changed the description</li> </ul> <p>A <code>DYNAMIC_MACRO</code> refresh is required if:</p> <ul> <li>You created a new macro</li> <li>You renamed an existing macro</li> <li>You changed the contents of a macro</li> <li>You deleted an existing macro</li> </ul>"},{"location":"features/receivingvariables/","title":"Receiving Variable Updates","text":"<p>Unlike normal <code>gcode_macro</code>s, Dynamic Macros supports receiving variable updates within the same macro. For example, the following macro will show the same output in both <code>M117</code>s:</p> <pre><code>[gcode_macro STATIC_MOVE]\ngcode:\n  G28\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position before macro run\n  G90\n  G1 Z20\n  M117 After: {printer.toolhead.position.z}\n  # Above displays same position\n</code></pre> <p>However, this macro will show different outputs based on the current Z position of the toolhead:</p> <pre><code>[gcode_macro DYNAMIC_MOVE]\ngcode:\n  G28\n\n\n  M117 Before: {printer.toolhead.position.z}\n  # Above displays position after G28\n  G90\n  G1 Z20\n\n\n  M117 After: {printer.toolhead.position.z}\n  # Above displays position after G1\n</code></pre> <p>Notice the large whitespaces. Three newline characters (two blank lines) between code segments denotes a variable update. However, some variables won't be preserevd across the whitespace.</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = 10 %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs nothing\n</code></pre> <p>You can use the <code>update()</code> function to preserve certain variables across the whitespaces:</p> <pre><code>[gcode_macro VARIABLES]\ngcode:\n    {% set num = update(\"num\", 10) %}\n    M117 {num}\n\n\n    M117 {num}\n    # Above line outputs 10\n</code></pre> <p>See Examples for examples.</p>"},{"location":"features/recursion/","title":"Recursion","text":"<p>Unlike normal <code>gcode_macro</code>s, Dynamic Macros supports recursion (allowing a macro to call itself). For more examples, see Examples</p>"},{"location":"features/utilities/","title":"Utility Functions","text":"<p>Dynamic Macros provides a few utility functions to make Dynamic Macros easier to write.</p>"},{"location":"features/utilities/#update","title":"update()","text":"<p>The <code>update()</code> function allows to save variables across whitespaces (see Receiving Variables for more information). Example:</p> <pre><code>[gcode_macro MY_MACRO]\ngcode:\n    {% set a = 10 %}\n    {% set b = update(\"b\", 20) %}\n    RESPOND MSG=\"A: {a}\" # 10\n    RESPOND MSG=\"B: {b}\" # 20\n\n\n    RESPOND MSG=\"A: {a}\" # \"\"\n    RESPOND MSG=\"B: {b}\" # 20\n</code></pre>"},{"location":"features/utilities/#get_macro_variables","title":"get_macro_variables()","text":"<p>The <code>get_macro_variables()</code> function allows to retrieve all the variables from another macro in one line of code. Example:</p> <pre><code>[gcode_macro MY_SETTINGS]\nvariable_a: 10\nvariable_b: 20\ngcode:\n    RESPOND MSG=\"settings\"\n\n[gcode_macro GET_SETTINGS]\ngcode:\n    {% set settings = get_macro_variables(\"MY_SETTINGS\") %}\n    RESPOND MSG=\"Settings: {settings}\"\n    RESPOND MSG=\"A: {settings.a}\"\n</code></pre>"},{"location":"features/utilities/#update_from_dict","title":"update_from_dict()","text":"<p>The <code>update_from_dict()</code> function allows for saving the output of <code>get_macro_variables()</code> (or other dictionaries) across the whitespaces when Receiving Variables. Example:</p> <pre><code>[gcode_macro MY_SETTINGS]\nvariable_a: 10\nvariable_b: 20\ngcode:\n    RESPOND MSG=\"settings\"\n\n[gcode_macro GET_SETTINGS]\ngcode:\n    {% set settings = get_macro_variables(\"MY_SETTINGS\") %}\n    {% set settings = update_from_dict(settings) %}\n\n\n    RESPOND MSG=\"A: {a}\" # 10\n    RESPOND MSG=\"B: {b}\" # 20\n</code></pre>"},{"location":"features/variables/","title":"Variables","text":"<p>Dynamic Macro variables work nearly the same way as standard <code>gcode_macro</code> variables. This guide covers the differences.</p>"},{"location":"features/variables/#set_dynamic_variable","title":"SET_DYNAMIC_VARIABLE","text":"<p>Instead of using <code>SET_GCODE_VARIABLE</code>, Dynamic Macros use <code>SET_DYNAMIC_VARIABLE</code> to update Dynamic Macro variables. Example (assuming <code>VAR_TEST</code> is defined from Utilities):</p> <pre><code>SET_DYNAMIC_VARIABLE MACRO=var_test VARIABLE=a VALUE=15\n</code></pre>"},{"location":"tutorial/","title":"Table of Contents","text":"<p>Follow this tutorial to learn how to create Dynamic Macros and to use its powerful features.</p>"},{"location":"tutorial/#standard-macros","title":"Standard Macros","text":"<p>Before writing macros, it's a good idea to learn how to write standard <code>gcode_macro</code>s. Here is an amazing guide on how to write standard macros.</p>"},{"location":"tutorial/#table-of-contents_1","title":"Table of Contents","text":"<ol> <li>Converting to Dynamic Macros</li> <li>Using Dynamic Macros Features</li> <li>Experimental Features</li> </ol>"},{"location":"tutorial/converting/","title":"Converting to Dynamic Macros","text":"<p>Follow this tutorial to convert your standard <code>gcode_macro</code> to a Dynamic Macro. </p>"},{"location":"tutorial/converting/#printercfg","title":"printer.cfg","text":"<p>First, remove the <code>include</code> line in your <code>printer.cfg</code> referencing the file your macros are in. For example, if your macros are in <code>macros.cfg</code>, remove the line:</p> <pre><code>[include macros.cfg]\n</code></pre> <p>from your <code>printer.cfg</code>.</p>"},{"location":"tutorial/converting/#dynamic-macros-configuration","title":"Dynamic Macros Configuration","text":"<p>Next, if you don't already have one, create a <code>[dynamicmacros]</code> config section in your <code>printer.cfg</code> and add your macro configuration to it:</p> printer.cfg<pre><code>[dynamicmacros]\nconfigs: macros.cfg # You can add more files to this list, separated by commas.\n</code></pre> KlipperScreen <p>If you convert your <code>LOAD_FILAMENT</code> and <code>UNLOAD_FILAMENT</code> macros to be dynamic, KlipperScreen may not recognize them and report an error. To fix this, add blank macros to your <code>printer.cfg</code>, before your <code>[dynamicmacros]</code> section. Example: printer.cfg<pre><code>[gcode_macro LOAD_FILAMENT]\ngcode:\n    M117 LOAD\n[gcode_macro UNLOAD_FILAMENT]\ngcode:\n    M117 UNLOAD\n</code></pre></p> <p>Restart Klipper.</p> <p>That's it. Your macros are now Dynamic Macros.</p>"},{"location":"tutorial/experimental/","title":"Experimental Features","text":"<p>Warning</p> <p>The features on this page are experimental, and untested or only lightly tested. Proceed at your own risk.</p>"},{"location":"tutorial/experimental/#running-python-from-within-a-macro","title":"Running Python from within a Macro","text":"<p>Disclaimer</p> <p>This functionality allows Dynamic Macros to gain significant control over your printer and Klipper host. I am not responsible for whatever happens if you download a malicious macro.</p> <p>There are three main reasons why this could be helpful:</p> <ol> <li>Allowing for deeper control of Klipper and the Klipper host</li> <li>A learning bridge for creating Klipper plugins/extras</li> <li>A tool to help develop Klipper plugins/extras without restarting Klipper</li> </ol> <p>First, get on the <code>dev</code> branch:</p> <pre><code>cd ~/DynamicMacros\ngit checkout dev\ngit pull origin\nsh install.sh\nsudo service klipper restart\n</code></pre> <p>To run Python from within a Dynamic Macro, use either the <code>python()</code> utility function, or the <code>python_file()</code> utility function. The <code>python()</code> function accepts python code as a multiline string, and the <code>python_file()</code> function accepts a filename (relative to your <code>printer.cfg</code> folder).</p> <p>Here are a few examples:</p>"},{"location":"tutorial/experimental/#python-math","title":"Python Math","text":"macros.cfg<pre><code>[gcode_macro MATH]\ngcode:\n    {% set value = python(\"\"\"\n    a = kwargs['a']\n    b = kwargs['b']\n    c = a + b\n    output(c)\n    \"\"\", a=1, b=2) %}\n    RESPOND MSG={value}\n</code></pre>"},{"location":"tutorial/experimental/#python-file-running-gcode","title":"Python File Running GCode","text":"macros.cfg<pre><code>[gcode_macro PYFILE]\ngcode:\n    {% set value = python_file(\"test.py\") %}\n    RESPOND MSG={value}\n</code></pre> test.py<pre><code>print(\"Hello from Python!\")\ngcode(\"G28\\nG1 X100 Y100 Z100 F1200\")\noutput(\"GCode Executed\")\n</code></pre>"},{"location":"tutorial/usingfeatures/","title":"Using Dynamic Macros Features","text":"<p>Now that your macros are dynamic, you can use the powerful feature set of Dynamic Macros.</p>"},{"location":"tutorial/usingfeatures/#recursion","title":"Recursion","text":"<p>Recursion allows a macro to call itself, something standard GCode macros can't do. </p> <p>When using recursion, it's important to make sure your macro has an \"end case\". This is a case when the macro won't call itself again. Otherwise the macro will be stuck in an infinite loop and freeze Klipper.</p> <p>Here are a few examples of recursion:</p> Counting to 10<pre><code>[gcode_macro COUNT]\ngcode:\n    {% set num = params.NUM|default(1)|int %}\n    {% if num &lt;= 10 %}\n        RESPOND MSG={num}\n        COUNT NUM={num+1} # Count up 1\n    {% else %}\n        RESPOND MSG=\"Done Counting\"\n    {% endif %}\n</code></pre> Load to Filament Sensor<pre><code>[gcode_macro LOAD_TO_FSENSOR]\ngcode:\n    {% set val = printer[\"filament_sensor fsensor\"].filament_detected %}\n    {% if val == 0 %}\n        M83\n        G1 E50 F900 # Move filament 50mm forwards\n        RESPOND MSG=\"Waiting for fsensor\"\n        LOAD_TO_FSENSOR # Recursion\n    {% else %}\n        G1 E65 F900 # Move filament to nozzle\n        RESPOND MSG=\"Filament Loaded\"\n    {% endif %}\n</code></pre>"},{"location":"tutorial/usingfeatures/#receiving-variable-updates","title":"Receiving Variable Updates","text":"<p>Receiving variable updates allows Dynamic Macros to update variables without rerunning the macro. </p> <p>An example of this is getting the printer's position. A standard GCode macro will evaluate all the variables, then run the GCode. However, using three newlines (two blank lines) between code segments in Dynamic Macros will allow each segment to be evaluated at runtime, allowing for variable updates.</p>"},{"location":"tutorial/usingfeatures/#utility-functions","title":"Utility Functions","text":"<p>See the link above (the subtitle) for more information on utility functions.</p>"}]}